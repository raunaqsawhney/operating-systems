<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Mailbox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Mailbox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Wed Nov 06 19:56:26 2013
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a]">Reset_Handler</a>
 <LI><a href="#[ac]">os_sys_manager_ret</a>
 <LI><a href="#[94]">os_switch_tasks_ret</a>
 <LI><a href="#[72]">__user_initial_stackheap</a>
 <LI><a href="#[b]">Undef_Handler</a>
 <LI><a href="#[d]">PAbt_Handler</a>
 <LI><a href="#[e]">DAbt_Handler</a>
 <LI><a href="#[f]">IRQ_Handler</a>
 <LI><a href="#[10]">FIQ_Handler</a>
 <LI><a href="#[17]">Switch_task</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[56]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">os_error</a><BR>
 <LI><a href="#[24]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">os_idle_demon</a><BR>
 <LI><a href="#[b]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Undef_Handler</a><BR>
 <LI><a href="#[d]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PAbt_Handler</a><BR>
 <LI><a href="#[e]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DAbt_Handler</a><BR>
 <LI><a href="#[f]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ_Handler</a><BR>
 <LI><a href="#[10]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">SWI_Handler</a> from hal_arm.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[17]">Switch_task</a> from hal_arm.o(.emb_text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[b]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">__SWI_0</a> from hal_arm.o(i.__SWI_0) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[1d]">__SWI_1</a> from rt_membox.o(i.__SWI_1) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[1e]">__SWI_2</a> from rt_membox.o(i.__SWI_2) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[1f]">__SWI_3</a> from hal_arm.o(i.__SWI_3) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[20]">__SWI_4</a> from hal_arm.o(i.__SWI_4) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[21]">__SWI_5</a> from rtx_config.o(.text) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[22]">__SWI_6</a> from hal_arm.o(i.__SWI_6) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[23]">__SWI_7</a> from hal_arm.o(i.__SWI_7) referenced from SWI_Table.o(SWI_TABLE)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[1b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1a]">fputc</a> from serial.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[12]">main</a> from mailbox.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[19]">os_clock_interrupt</a> from hal_arm.o(.emb_text) referenced from rtx_config.o(.text)
 <LI><a href="#[18]">os_def_interrupt</a> from rtx_config.o(.text) referenced from rtx_config.o(.text)
 <LI><a href="#[24]">os_idle_demon</a> from rtx_config.o(.text) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[14]">os_irq_ack_lock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[13]">os_sys_init1</a> from rt_task.o(i.os_sys_init1) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[15]">os_sys_manager</a> from rt_system.o(i.os_sys_manager) referenced from hal_arm.o(.emb_text)
 <LI><a href="#[25]">os_tsk_create0</a> from rt_task.o(i.os_tsk_create0) referenced from rt_task.o(i.os_sys_init1)
 <LI><a href="#[47]">rec_task</a> from mailbox.o(.text) referenced from mailbox.o(.text)
 <LI><a href="#[48]">send_task</a> from mailbox.o(.text) referenced from mailbox.o(.text)
 <LI><a href="#[16]">tsk_unlock</a> from rtx_config.o(.text) referenced from hal_arm.o(.emb_text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[31]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[33]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[40]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[35]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[b3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[37]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[b4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[be]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[39]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[44]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[30]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cc]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3d]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3f]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[41]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[ce]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[45]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>_inc_qi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_arm.o(.emb_text), UNUSED)

<P><STRONG><a name="[aa]"></a>_dec_qc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[a6]"></a>os_set_env</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[55]"></a>os_sys_init0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>os_sys_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[19]"></a>os_clock_interrupt</STRONG> (ARM, 128 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>os_sys_manager_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[c]"></a>SWI_Handler</STRONG> (ARM, 196 bytes, Stack size 0 bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>os_switch_tasks_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
</UL>

<P><STRONG><a name="[4f]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[d1]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[53]"></a>init_serial</STRONG> (ARM, 44 bytes, Stack size 0 bytes, mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>rec_task</STRONG> (ARM, 96 bytes, Stack size 8 bytes, mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = rec_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mailbox.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>send_task</STRONG> (ARM, 224 bytes, Stack size 0 bytes, mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = send_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0 (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mailbox.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>main</STRONG> (ARM, 64 bytes, Stack size 8 bytes, mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = main &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init0 (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[1a]"></a>fputc</STRONG> (ARM, 60 bytes, Stack size 0 bytes, serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>getkey</STRONG> (ARM, 24 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>os_idle_demon</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[ad]"></a>os_tmr_call</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>os_error</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>

<P><STRONG><a name="[27]"></a>os_tmr_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[28]"></a>os_tmr_force_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[29]"></a>os_tmr_inspect_cnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[2a]"></a>os_tmr_inspect_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[14]"></a>os_irq_ack_lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[21]"></a>__SWI_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[16]"></a>tsk_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[2b]"></a>__user_perthread_libspace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>_mutex_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2d]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _mutex_acquire &rArr; os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>

<P><STRONG><a name="[2e]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>

<P><STRONG><a name="[72]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d3]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4a]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_task (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[34]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[63]"></a>srand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[38]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task
</UL>

<P><STRONG><a name="[d5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_char_file</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[61]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[67]"></a>ferror</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ferror_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ferror &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3a]"></a>_initio</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[3c]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[6f]"></a>_sys_open</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[76]"></a>_sys_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[8c]"></a>_sys_write</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[d6]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[8b]"></a>_sys_seek</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[d7]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3e]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[73]"></a>_free_internal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[6e]"></a>free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[6c]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[d8]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>setvbuf</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[69]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[79]"></a>_fopen$locked</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[42]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>__rt_SIGRTRED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via Veneer)
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_heap_descriptor</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>

<P><STRONG><a name="[df]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[81]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[36]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[84]"></a>_malloc_internal</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7a]"></a>malloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
</UL>

<P><STRONG><a name="[78]"></a>_fseek</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[e1]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[8a]"></a>_writebuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[75]"></a>_fflush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[8d]"></a>_deferredlazyseek</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[7e]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[7d]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[82]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[70]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[46]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[83]"></a>__Heap_Initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[87]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[e2]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[8f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[91]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_errno_addr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>__errno$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_errno_addr$twolibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5e]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1c]"></a>__SWI_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __SWI_0 &rArr; os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_tasks_ret
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[1d]"></a>__SWI_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_1))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[1e]"></a>__SWI_2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_membox.o(i.__SWI_2))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[1f]"></a>__SWI_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_3))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[20]"></a>__SWI_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_4))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[22]"></a>__SWI_6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_6))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[23]"></a>__SWI_7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_arm.o(i.__SWI_7))
<BR>[Address Reference Count : 1]<UL><LI> SWI_Table.o(SWI_TABLE)
</UL>
<P><STRONG><a name="[54]"></a>_init_box</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>os_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_task.o(i.os_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_dly
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dly_wait
</UL>

<P><STRONG><a name="[98]"></a>os_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.os_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_chk_robin &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[9a]"></a>os_dec_dly</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rt_list.o(i.os_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dec_dly &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[9b]"></a>os_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.os_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[4e]"></a>os_dly_wait</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_time.o(i.os_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_dly_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>os_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.os_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_evt_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[97]"></a>os_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.os_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[a7]"></a>os_init_robin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_robin.o(i.os_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[a0]"></a>os_init_stack</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hal_arm.o(i.os_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
</UL>

<P><STRONG><a name="[4d]"></a>os_mbx_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mbx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[a1]"></a>os_mbx_psh</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_mailbox.o(i.os_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbx_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[51]"></a>os_mbx_send</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rt_mailbox.o(i.os_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbx_send &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>os_mbx_wait</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rt_mailbox.o(i.os_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbx_wait &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_task (via Veneer)
</UL>

<P><STRONG><a name="[57]"></a>os_mut_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mut_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[59]"></a>os_mut_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rt_mutex.o(i.os_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[58]"></a>os_mut_wait</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_mutex.o(i.os_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_mut_wait &rArr; os_block &rArr; os_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[96]"></a>os_put_dly</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, rt_list.o(i.os_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_block
</UL>

<P><STRONG><a name="[99]"></a>os_put_prio</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_list.o(i.os_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[9c]"></a>os_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.os_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
</UL>

<P><STRONG><a name="[a2]"></a>os_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_list.o(i.os_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_resort_prio &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_wait
</UL>

<P><STRONG><a name="[9e]"></a>os_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rt_list.o(i.os_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mut_release
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_send
</UL>

<P><STRONG><a name="[a3]"></a>os_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.os_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resort_prio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
</UL>

<P><STRONG><a name="[a4]"></a>os_sem_psh</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_semaphore.o(i.os_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sem_psh &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_prio
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[92]"></a>os_stk_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_arm.o(i.os_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
</UL>

<P><STRONG><a name="[13]"></a>os_sys_init1</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, rt_task.o(i.os_sys_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_sys_init1 &rArr; os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init (Weak Reference)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_run
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_robin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[15]"></a>os_sys_manager</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, rt_system.o(i.os_sys_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = os_sys_manager &rArr; os_dec_dly &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_reload (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_tick
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_psh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_evt_psh
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dec_dly
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_chk_robin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_post_taskswitch (Weak Reference)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager_ret
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dec_qc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbx_psh
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_put_rdy_first
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_first
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_ovf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_inspect_cnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[4c]"></a>os_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.os_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[ab]"></a>os_tmr_tick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_timer.o(i.os_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[25]"></a>os_tsk_create0</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rt_task.o(i.os_tsk_create0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_tsk_create0 &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_context
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.os_sys_init1)
</UL>
<P><STRONG><a name="[52]"></a>os_tsk_delete</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rt_task.o(i.os_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_tsk_delete &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_notify (Weak Reference)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stk_check
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_list
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rmv_dly
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dispatch
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>os_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.os_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18]"></a>os_def_interrupt</STRONG> (ARM, 20 bytes, Stack size 4 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_def_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>os_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.os_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_init_context &rArr; os_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[17]"></a>Switch_task</STRONG> (ARM, 0 bytes, Stack size unknown bytes, hal_arm.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> hal_arm.o(.emb_text)
</UL>
<P><STRONG><a name="[1b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>_freopen_locked</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_mut_release &rArr; os_dispatch &rArr; os_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[85]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6d]"></a>_mutex_free</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[65]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[64]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>os_tmr_reload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>

<P><STRONG><a name="[a5]"></a>rt_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_init1
</UL>

<P><STRONG><a name="[ae]"></a>rt_notify</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_delete
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_create0
</UL>

<P><STRONG><a name="[93]"></a>rt_post_taskswitch</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SWI_0
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sys_manager
</UL>
<HR></body></html>
